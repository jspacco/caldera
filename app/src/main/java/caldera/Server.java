/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package caldera;

import java.io.FileInputStream;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Scanner;
import java.util.stream.Collectors;

import com.google.gson.Gson;

public class Server
{
    private ServerSocket serverSocket;
    // the done variable doesn't really do anything since I just close the serverSocket
    private boolean done = false;
    private Map<String, String> users = new HashMap<>();
    private List<Event> events;

    public Server(int port, String usersFile, String baseEventsFile) throws Exception
    {
        // open the server socket
        serverSocket = new ServerSocket(port);
        System.out.println("Listening on port " + serverSocket.getLocalPort() + "...");
        
        // read the users file with usernames and passwords
        Properties properties = new Properties();
        properties.load(new FileInputStream(usersFile));
        for (String key : properties.stringPropertyNames())
        {
            users.put(key, properties.getProperty(key));
        }

        String jsonEvents = new String(Files.readAllBytes(Paths.get(baseEventsFile)), StandardCharsets.UTF_8);
        events = Event.fromJsonArray(jsonEvents);
    }

    private synchronized void addEvent(Event event) throws Exception
    {
        events.add(event);
        // write events to a file
        new Gson().toJson(events.stream().map(Event::toMap).collect(Collectors.toList()), new PrintStream("events.json"));
    }

    private boolean authenticate(String username, String key)
    {
        return users.containsKey(username) && users.get(username).equals(key);
    }

    private class ServerThread extends Thread
    {
        private Socket socket;

        public ServerThread(Socket socket)
        {
            super("ServerThread");
            this.socket = socket;
        }

        private void sendResponse(Socket socket, ResponseCode code, String message) throws Exception
        {
            Response response = new Response(code, message);
            PrintStream out = new PrintStream(socket.getOutputStream());
            out.println(response.toJson());
            out.flush();
            out.close();
            socket.close();
            System.err.println("Response sent " + response);
        }

        public void run()
        {
            try {
                Scanner scanner = new Scanner(socket.getInputStream());
                String username = scanner.nextLine();
                String key = scanner.nextLine();
                if (!authenticate(username, key))
                {
                    System.err.println("Authentication failed for " + username);
                    sendResponse(socket, ResponseCode.AUTHENTICATION_FAILURE, "Authentication failed");
                    return;
                }
                String eventJson = scanner.nextLine();
                Event event = Event.fromJson(eventJson);

                System.err.println("Received event: " + event);

                addEvent(event);

                System.err.println("added event to list");

                sendResponse(socket, ResponseCode.SUCCESS, "Event received");
                
            } catch (Exception e) {
                //TODO: log this somewhere
                e.printStackTrace();
            }
            finally {
                try {
                    if (socket != null && !socket.isClosed()) socket.close();
                } catch (Exception e)
                {
                    //TODO: log this somewhere
                }
            }
        }
    }

    
    public void run() throws Exception
    {
        // server thread that listens for incoming connections
        Thread serverThread = new Thread(() -> {
            while (!done)
            {
                try {
                    Socket socket = serverSocket.accept();
                    new ServerThread(socket).start();
                } catch (Exception e)
                {
                    //TODO: log this somewhere
                    e.printStackTrace();
                }
            }
        });
        serverThread.start();

        // main thread that listens for commands
        Scanner scanner = new Scanner(System.in);
        while (true)
        {
            String command = scanner.nextLine();
            System.out.println("COMMAND: " + command);
            if (command.equals("quit"))
            {
                done = true;
                break;
            }
            else if (command.equals("users"))
            {
                for (String username : users.keySet())
                {
                    System.out.println(username);
                }
                System.out.println();
            }
            else if (command.equals("count"))
            {
                System.out.println("Total events: " + events.size());
            }
        }
        scanner.close();
        serverSocket.close();
        
    }

    public void shutdown() throws Exception
    {
        done = true;
        serverSocket.close();
    }

    public static void main(String[] args) throws Exception
    {
        Server server = new Server(8889, "users.properties", "base-events.json");
        server.run();
    }
}
