plugins {
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
}
version = '0.0.1'
sourceCompatibility = '21'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    implementation 'org.springframework.boot:spring-boot'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    
    implementation 'com.h2database:h2'
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
}




task server(type: JavaExec) {
    doFirst {
        standardInput = System.in
    }
    group = 'application'
    description = 'Run the Server class'
    classpath = sourceSets.main.runtimeClasspath
    main = 'caldera.Server'
}

task client(type: JavaExec) {
    group = 'application'
    description = 'Run the Client class'
    classpath = sourceSets.main.runtimeClasspath
    main = 'caldera.client.EventClient'
}

task student(type: JavaExec) {
    group = 'application'
    description = 'Run the Client class'
    classpath = sourceSets.main.runtimeClasspath
    main = 'caldera.client.ProcessEvents'
}


tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

springBoot {
    mainClass = 'caldera.server.SpringServer'
}

bootJar {
    archiveFileName = "spring-${version}.jar"
}

task zipServer(type: Zip) {
    // Set the name of the output ZIP file
    archiveFileName = "caldera-${version}.zip"
    
    // Define the destination directory for the ZIP file
    destinationDirectory = file("${buildDir}/release")

    // Specify files or directories to include in the ZIP file
    from('../config') {
        include '**/*'
        into 'config'
    }

    from('build/libs') {
        include '**/spring*.jar'
    }

    into("caldera-${version}")
}

configurations {
    fatJarConfig
}

// Assign selected dependencies to the custom configuration
dependencies {
    fatJarConfig 'com.fasterxml.jackson.core:jackson-databind'
    fatJarConfig 'com.fasterxml.jackson.core:jackson-annotations'
    fatJarConfig 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    fatJarConfig 'com.squareup.okhttp3:okhttp:4.9.3'
}

task fatJar(type: Jar) {
    // for the client
    manifest {
        attributes 'Main-Class': 'caldera.client.EventClient'
    }
    archiveBaseName = "caldera-client"
    destinationDirectory = file("${buildDir}/release")
    
    // Include only the specific package from src/main/java
    from(sourceSets.main.output.classesDirs) {
        include 'caldera/client/**'
        include 'caldera/server/Event.class'
        include 'caldera/server/Event$*.class'
        exclude 'caldera/server/**'
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.fatJarConfig.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task release {
    dependsOn 'zipServer'
    dependsOn 'fatJar'
}